# Spring Cloud Stream
spring.cloud.stream.kafka.compatibilityMode=false
spring.cloud.stream.default.producer.headerMode=headers
spring.cloud.stream.default.consumer.headerMode=headers
spring.cloud.stream.default.producer.errorChannelEnabled=true

# Spring Cloud Bus
spring.cloud.bus.id=${spring.application.name:unknown}:${local.server.port:${server.port:0}}:${spring.application.index:unknown}
spring.cloud.bus.destination=SPRING_CLOUD_BUS
spring.cloud.bus.env.enabled=false
spring.cloud.bus.refresh.enabled=false

### Kafka specific configurations

# Producer
# See https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/#kafka-producer-properties
spring.cloud.stream.kafka.default.producer.sync=false

# spring.cloud.stream.kafka.default.producer.configuration.* are kafka client properties.
# See https://kafka.apache.org/20/documentation.html#producerconfigs
spring.cloud.stream.kafka.default.producer.configuration.acks=${spring.cloud.stream.kafka.binder.required-acks:1}
spring.cloud.stream.kafka.default.producer.configuration.retries=3
#spring.cloud.stream.kafka.default.producer.configuration.retry.backoff.ms=100
#spring.cloud.stream.kafka.default.producer.configuration.max.in.flight.requests.per.connection=5
# this requires max.in.flight.requests.per.connection <= 5, retires > 0 and acks == -1(all)
#spring.cloud.stream.kafka.default.producer.configuration.enable.idempotence=true

#spring.cloud.stream.kafka.default.producer.configuration.request.timeout.ms=30000
#spring.cloud.stream.kafka.default.producer.configuration.max.block.ms=60000
#spring.cloud.stream.kafka.default.producer.configuration.reconnect.backoff.ms=50
#spring.cloud.stream.kafka.default.producer.configuration.reconnect.backoff.max.ms=1000

#spring.cloud.stream.kafka.default.producer.configuration.linger.ms=0
#spring.cloud.stream.kafka.default.producer.configuration.batch.size=16384
#spring.cloud.stream.kafka.default.producer.configuration.max.request.size=1048576

# Consumer
# See https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/#kafka-consumer-properties
#...

# By default, commit after each message to reduce chances of replayed messages.  Applications should still configure
# the Kafka client max.poll.* properties appropriately if they want to further reduce chances for any replayed
# records.  Applications can set this to false if they need to avoid the additional overhead.
spring.cloud.stream.kafka.default.consumer.ack-each-record=true

# spring.cloud.stream.kafka.default.consumer.configuration.* are kafka client properties.
# See https://kafka.apache.org/20/documentation.html#consumerconfigs
spring.cloud.stream.kafka.default.consumer.configuration.retries=3
#spring.cloud.stream.kafka.default.consumer.configuration.retry.backoff.ms=100

#spring.cloud.stream.kafka.default.consumer.configuration.request.timeout.ms=40000
#spring.cloud.stream.kafka.default.consumer.configuration.reconnect.backoff.ms=50
#spring.cloud.stream.kafka.default.consumer.configuration.reconnect.backoff.max.ms=1000
#spring.cloud.stream.kafka.default.consumer.configuration.session.timeout.ms=10000
#spring.cloud.stream.kafka.default.consumer.configuration.max.poll.interval.ms=300000
#spring.cloud.stream.kafka.default.consumer.configuration.max.poll.records=500
#spring.cloud.stream.kafka.default.consumer.configuration.worker.sync.timeout.ms=3000
#spring.cloud.stream.kafka.default.consumer.configuration.worker.unsync.backoff.ms=300000

# Binder (Affects both Producer and Consumer)

# Following are selected defaults.
# See https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/#_kafka_binder_properties
# Also see https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/#_configuration_options_2

#spring.cloud.stream.kafka.binder.headers=
#spring.cloud.stream.kafka.binder.offsetUpdateTimeWindow=10000
#spring.cloud.stream.kafka.binder.offsetUpdateCount=0
#spring.cloud.stream.kafka.binder.requiredAcks=1
#spring.cloud.stream.kafka.binder.minPartitionCount=1
#spring.cloud.stream.kafka.binder.replicationFactor=1
#spring.cloud.stream.kafka.binder.autoCreateTopics=true
#spring.cloud.stream.kafka.binder.autoAddPartitions=false
#spring.cloud.stream.kafka.binder.socketBufferSize=2097152